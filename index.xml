<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lanting Guo on Lanting Guo</title>
    <link>http://www.ltguo.me/</link>
    <description>Recent content in Lanting Guo on Lanting Guo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Lanting Guo</copyright>
    <lastBuildDate>Sun, 11 Jun 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>3 Longest Substring Without Repeating Characters</title>
      <link>http://www.ltguo.me/post/leetcode/3-longest-substring-without-repeating-characters/</link>
      <pubDate>Wed, 28 Jun 2017 23:41:55 +0800</pubDate>
      
      <guid>http://www.ltguo.me/post/leetcode/3-longest-substring-without-repeating-characters/</guid>
      <description>&lt;p&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Given a string, find the length of the longest substring without repeating characters.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;Given &amp;ldquo;abcabcbb&amp;rdquo;, the answer is &amp;ldquo;abc&amp;rdquo;, which the length is 3.&lt;/p&gt;

&lt;p&gt;Given &amp;ldquo;bbbbb&amp;rdquo;, the answer is &amp;ldquo;b&amp;rdquo;, with the length of 1.&lt;/p&gt;

&lt;p&gt;Given &amp;ldquo;pwwkew&amp;rdquo;, the answer is &amp;ldquo;wke&amp;rdquo;, with the length of 3. Note that the answer must be a substring, &amp;ldquo;pwke&amp;rdquo; is a subsequence and not a substring.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Answer:&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;class Solution {
 public:
  int lengthOfLongestSubstring(string s) {
    if (s.length() == 0) return 0;
    vector&amp;lt;size_t&amp;gt; lens = {};
    string substring = &amp;quot;&amp;quot;;
    size_t ind = 0;
    for (auto c: s){
      ind = substring.find_last_of(c);
      if (string::npos != ind){ // not in substr
        lens.push_back(substring.length());
        substring = substring.substr(ind+1);
      }
      substring.push_back(c);
    }
    lens.push_back(substring.length());
    
    size_t tmp = 0;
    for (auto l: lens){
      if (l &amp;gt; tmp) tmp = l;
    }
    
    return (int)tmp;
  }
};




&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>add two numbers</title>
      <link>http://www.ltguo.me/post/leetcode/2-add-two-numbers/</link>
      <pubDate>Wed, 28 Jun 2017 23:13:07 +0800</pubDate>
      
      <guid>http://www.ltguo.me/post/leetcode/2-add-two-numbers/</guid>
      <description>

&lt;h3 id=&#34;2-add-two-numbers&#34;&gt;2. Add Two Numbers&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Description:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;

&lt;p&gt;You may assume the two numbers do not contain any leading zero, except the number 0 itself.&lt;/p&gt;

&lt;p&gt;Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)
Output: 7 -&amp;gt; 0 -&amp;gt; 8&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Answer:&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;/**

 * Definition for singly-linked list.

 * struct ListNode {

 *     int val;

 *     ListNode *next;

 *     ListNode(int x) : val(x), next(NULL) {}

 * };

 */

class Solution {

public:

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        ListNode* head = new ListNode(0);

        ListNode* curr_node = head;

        //handle empty listnode

        unsigned int to_next = 0,val=0,val1=0,val2=0;

        while (l1!=NULL || l2!=NULL){

            if (l1 != NULL){

                val1 = l1-&amp;gt;val;

                l1 = l1-&amp;gt;next;

            }

            else{

                val1 = 0;

            }

            if (l2 != NULL){

                val2 = l2-&amp;gt;val;

                l2 = l2-&amp;gt;next;

            }

            else{

                val2 = 0;

            }

            val = val1 + val2 + to_next;

            to_next = 0;

            if (val &amp;gt;= 10){

                to_next = 1;

                val -= 10;

            }

            curr_node -&amp;gt;next = new ListNode(val);

            curr_node = curr_node-&amp;gt;next;

            

        }

        if (to_next == 1){

            curr_node -&amp;gt;next = new ListNode(to_next);

            curr_node = curr_node-&amp;gt;next;

        }

        return head-&amp;gt;next;

    }

};

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Notes about C&#43;&#43;</title>
      <link>http://www.ltguo.me/post/learning-c&#43;&#43;/</link>
      <pubDate>Wed, 28 Jun 2017 08:19:50 +0800</pubDate>
      
      <guid>http://www.ltguo.me/post/learning-c&#43;&#43;/</guid>
      <description>

&lt;h1 style=&#34;background-color:black; color:Blue&#34;&gt;C++ Primer&lt;/h1&gt;

&lt;h3 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h3&gt;

&lt;h3 id=&#34;chapter-2&#34;&gt;Chapter 2&lt;/h3&gt;

&lt;h3 id=&#34;chapter-3&#34;&gt;Chapter 3&lt;/h3&gt;

&lt;h3 id=&#34;chapter-4&#34;&gt;Chapter 4&lt;/h3&gt;

&lt;h3 id=&#34;chapter-5&#34;&gt;Chapter 5&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
&lt;h1 style=&#34;background-color:black;color:Blue&#34;&gt;基于Linux的C++(THU MOOC)&lt;/h1&gt;&lt;/p&gt;

&lt;h2 id=&#34;第九讲-类与对象&#34;&gt;第九讲: 类与对象&lt;/h2&gt;

&lt;h3 id=&#34;缺省构造函数-缺省拷贝函数-缺省析构函数&#34;&gt;缺省构造函数，缺省拷贝函数，缺省析构函数，&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;构造函数的初始化列表　在构造对象的时候同步构造内部对象而写在函数内部，是对象构造完之后，再执行.&lt;/li&gt;
&lt;li&gt;成员初始化顺序是按照成员定义的顺序&lt;/li&gt;
&lt;li&gt;析构函数只能一个，可以系统调用或自己调用。但自己调用时，只是删除数据，并没有释放内存&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;内联函数&#34;&gt;内联函数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;内联函数要定义在头文件里&lt;/li&gt;
&lt;li&gt;类内定义的函数，自动转为内联&lt;/li&gt;
&lt;li&gt;构造／析构函数，可能含有附加操作，慎用内联&lt;/li&gt;
&lt;li&gt;inline是对编译器的建议&lt;/li&gt;
&lt;li&gt;常数据成员必须在初始化是定义，并且保持不变。&lt;/li&gt;
&lt;li&gt;常成员函数不修改对象成员的值，注意const标志 void GetElem(void * arg) const&lt;/li&gt;
&lt;li&gt;静态数据成员，由类所有对象共享 static unsigned int count; 且初始化必须在类外，且定义不能在头文件中&lt;/li&gt;
&lt;li&gt;静态成员函数，为访问静态数据成员 static int func(char* arg);　没有this指针。&lt;/li&gt;
&lt;li&gt;singleton&lt;/li&gt;
&lt;li&gt;free与delete相比不调用析构函数，直接将内存交给OS&lt;/li&gt;
&lt;li&gt;静态常数据成员，只能在类外部初始化&lt;/li&gt;
&lt;li&gt;慎用　友元函数与友元类，可以访问自己的私有数据，但自己未必能访问对方的private数据　friend 函数/类声明 写在类的定义里&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;继承&#34;&gt;继承&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;继承与派生

&lt;ul&gt;
&lt;li&gt;派生类拥有基类的所有属性与行为，只能添加，不能取消&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;单继承　

&lt;ul&gt;
&lt;li&gt;class 派生类: [public/protected/private] 基类　{&amp;hellip;&amp;hellip;};&lt;/li&gt;
&lt;li&gt;建议将访问频繁的基类成员定为protected p3.P::print();&lt;/li&gt;
&lt;li&gt;派生类的构造函数，基类的构造要在初始化列表里&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;多继承 慎用　派生类中可能保护多个基类副本

&lt;ul&gt;
&lt;li&gt;class 派生类: [public/protected/private] 基类A,　[public/protected/private] 基类B {&amp;hellip;&amp;hellip;};&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;虚继承　

&lt;ul&gt;
&lt;li&gt;取消多继承时派生类中公共基类的多个副本，只保留一份&lt;/li&gt;
&lt;li&gt;派生时使用virtual　　class 派生类: virtual [public/protected/private] 基类A,　[public/protected/private] 基类B {&amp;hellip;&amp;hellip;};&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;派生类的构造函数与析构函数

&lt;ul&gt;
&lt;li&gt;构造函数，先执行基类的构造函数，按继承顺序；调用派生类新增成员的构造函数；调用派生类的构造函数&lt;/li&gt;
&lt;li&gt;析构函数顺序与构造函数完全相反&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;类的赋值兼容性

&lt;ul&gt;
&lt;li&gt;公有派生时，任何基类对象出现的地方，都可以用派生类取代。只有派生类中基类中部分生效&lt;/li&gt;
&lt;li&gt;保护派生和私有派生，不可以直接赋值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;多态&#34;&gt;多态&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不同对象在接受相同消息，做出不同反应&lt;/li&gt;
&lt;li&gt;虚函数:　virtual 函数返回值　函数名(函数参数)&lt;/li&gt;
&lt;li&gt;被继承，也同样为virtual

&lt;ul&gt;
&lt;li&gt;虚拟表　虚表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;纯虚函数

&lt;ul&gt;
&lt;li&gt;充当占位函数，没有任何实现&lt;/li&gt;
&lt;li&gt;派生类负责其具体实现&lt;/li&gt;
&lt;li&gt;virtual int func(int arg) = 0;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;抽象类

&lt;ul&gt;
&lt;li&gt;带有纯虚函数的类&lt;/li&gt;
&lt;li&gt;虚构造函数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第十讲-操作符重载&#34;&gt;第十讲: 操作符重载&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;四则运算符重载&lt;/li&gt;
&lt;li&gt;关系操作符重载&lt;/li&gt;
&lt;li&gt;下标操作符重载&lt;/li&gt;
&lt;li&gt;赋值操作符重载

&lt;ul&gt;
&lt;li&gt;拷贝、赋值和析构三位一体，一般同时出现&lt;/li&gt;
&lt;li&gt;如果对象有指针成员，一般要重载这三个函数&lt;/li&gt;
&lt;li&gt;有时因为是浅拷贝，会出现系统崩溃&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动语义(C++11)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A(A &amp;amp;&amp;amp;that)&lt;/li&gt;
&lt;li&gt;可以同时提供深copy和移动copy两套函数&lt;/li&gt;
&lt;li&gt;右值意义
-流操作符重载&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cout支持重载，这点比printf优&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第十一讲-泛型编程&#34;&gt;第十一讲: 泛型编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;泛型编程概览

&lt;ul&gt;
&lt;li&gt;编写不依赖数据类型的代码，就是泛型编程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;异常处理机制

&lt;ul&gt;
&lt;li&gt;catch(int) catch(char) catch(Point) catch(&amp;hellip;)&lt;/li&gt;
&lt;li&gt;noexcept(true) noexcept(false) noexcept(noexcept(expr))&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RTTI

&lt;ul&gt;
&lt;li&gt;#include &lt;typeinfo&gt; typeid(e).name()&lt;/li&gt;
&lt;li&gt;dynamic_cast&lt;/li&gt;
&lt;li&gt;static_cast

&lt;ul&gt;
&lt;li&gt;一般用于非类型式的普通数据对象转型&lt;/li&gt;
&lt;li&gt;不进行运行期型式检查，不安全; 若失败，结果无定义&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;reinterpret_cast

&lt;ul&gt;
&lt;li&gt;重新解释位序列的意义&lt;/li&gt;
&lt;li&gt;由程序员保证正确&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;const_cast

&lt;ul&gt;
&lt;li&gt;用与设置/取消量的const状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;模板与型式参数化

&lt;ul&gt;
&lt;li&gt;模板代码要放在头文件中，编译器需要看到模板源代码&lt;/li&gt;
&lt;li&gt;模板用途

&lt;ul&gt;
&lt;li&gt;函数模板，类模板，元编程&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第十三讲-进程编程&#34;&gt;第十三讲　进程编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;进程间通信

&lt;ul&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;共享内存&lt;/li&gt;
&lt;li&gt;映射内存　VS 管道&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;进程池&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第十四讲-线程编程&#34;&gt;第十四讲　线程编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;线程管理&lt;/li&gt;
&lt;li&gt;线程同步&lt;/li&gt;
&lt;li&gt;C++11线程库

&lt;ul&gt;
&lt;li&gt;赋值不能是copy赋值，只能是move赋值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;第十五讲-网络编程&#34;&gt;第十五讲　网络编程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;网络协议&lt;/li&gt;
&lt;li&gt;套接字&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>LanOS</title>
      <link>http://www.ltguo.me/project/lanos/</link>
      <pubDate>Mon, 26 Jun 2017 19:33:18 +0800</pubDate>
      
      <guid>http://www.ltguo.me/project/lanos/</guid>
      <description>

&lt;h3 id=&#34;what-is-lanos&#34;&gt;What is LanOS?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;X86-64&lt;/li&gt;
&lt;li&gt;GPU&lt;/li&gt;
&lt;li&gt;trading&lt;/li&gt;
&lt;li&gt;AI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prepares&#34;&gt;Prepares&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ICM CMU course&lt;/li&gt;
&lt;li&gt;THU Assembly course&lt;/li&gt;
&lt;li&gt;THU DSA course&lt;/li&gt;
&lt;li&gt;THU OS MOOC course&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-to-make-it&#34;&gt;How to make it?&lt;/h3&gt;

&lt;h3 id=&#34;result&#34;&gt;Result&lt;/h3&gt;

&lt;h3 id=&#34;lanos-vs-linux-kernel&#34;&gt;LanOS VS Linux kernel&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>BHTsne.jl</title>
      <link>http://www.ltguo.me/project/bhtsne.jl/</link>
      <pubDate>Mon, 12 Jun 2017 19:01:40 +0800</pubDate>
      
      <guid>http://www.ltguo.me/project/bhtsne.jl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>HTSLIB.jl</title>
      <link>http://www.ltguo.me/project/htslib.jl/</link>
      <pubDate>Mon, 12 Jun 2017 19:01:29 +0800</pubDate>
      
      <guid>http://www.ltguo.me/project/htslib.jl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MINE.jl</title>
      <link>http://www.ltguo.me/project/mine.jl/</link>
      <pubDate>Mon, 12 Jun 2017 18:58:50 +0800</pubDate>
      
      <guid>http://www.ltguo.me/project/mine.jl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>http://www.ltguo.me/_talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.ltguo.me/_talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://gcushen.github.io/hugo-academic-demo/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Person Re-Identification System For Mobile Devices</title>
      <link>http://www.ltguo.me/_publication/_person-re-identification/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.ltguo.me/_publication/_person-re-identification/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile visual clothing search</title>
      <link>http://www.ltguo.me/_publication/_clothing-search/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.ltguo.me/_publication/_clothing-search/</guid>
      <description>&lt;p&gt;More detail can easily be written here using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
